// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  // fields
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  bio        String?
  url        String?
  password   String
  verifiedAt DateTime?

  // timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  // relations
  Role                 Role                  @relation(fields: [roleId], references: [id])
  roleId               Int
  refreshTokens        RefreshToken[]
  confirmEmailTokens   ConfirmEmailToken[]
  forgotPasswordTokens ForgotPasswordToken[]
  comments             Comment[]
}

model Role {
  // fields
  id   Int    @id @default(autoincrement())
  name String @unique

  // timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  // relations
  users User[]
}

model RefreshToken {
  // fields
  id    Int    @id @default(autoincrement())
  token String @unique

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // relations
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model ConfirmEmailToken {
  // fields
  id    Int    @id @default(autoincrement())
  token String @unique

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // relations
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model ForgotPasswordToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // relations
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Post {
  id      Int     @id @default(autoincrement())
  title   String
  content String
  isDraft Boolean @default(true)

  // timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  // relations
  comments Comment[]
  tags     Tag[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // relations
  Post   Post @relation(fields: [postId], references: [id])
  User   User @relation(fields: [userId], references: [id])
  postId Int
  userId Int
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  // timestamps
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  // relations
  posts Post[]
}
